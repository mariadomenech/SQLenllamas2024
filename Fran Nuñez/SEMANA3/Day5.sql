/*SEMANA 3 - DÍA 5*/

USE SCHEMA SQL_EN_LLAMAS_FNM.CASE03

CREATE OR REPLACE FUNCTION SQL_EN_LLAMAS_FNM.CASE03.FUNCION_TOTAL_COMPRAS(CLIENTE INT, MES VARCHAR)
RETURNS INT
LANGUAGE SQL
AS 'SELECT TOTAL_COMPRAS
    FROM (
    SELECT CUSTOMER_ID AS CLIENTE,
     MONTHNAME(TXN_DATE) AS MES_NOMBRE,
     SUM(TXN_AMOUNT) AS TOTAL_COMPRAS
    FROM CUSTOMER_TRANSACTIONS
    WHERE TXN_TYPE =''purchase''
    and customer_id = CLIENTE AND MES_NOMBRE = MES
    GROUP BY 1,2
    ORDER BY 1 ASC
    )A';

CREATE OR REPLACE FUNCTION SQL_EN_LLAMAS_FNM.CASE03.FUNCION_TOTAL_DEPOSITADO(CLIENTE INT, MES VARCHAR)
RETURNS INT
LANGUAGE SQL
AS 'SELECT TOTAL_DEPOSITADO
    FROM (
    SELECT CUSTOMER_ID AS CLIENTE,
     MONTHNAME(TXN_DATE) AS MES_NOMBRE,
     SUM(TXN_AMOUNT) AS TOTAL_DEPOSITADO
    FROM CUSTOMER_TRANSACTIONS
    WHERE TXN_TYPE =''deposit''
    and customer_id = CLIENTE AND MES_NOMBRE = MES
    GROUP BY 1,2
    ORDER BY 1 ASC
    )A';

CREATE OR REPLACE FUNCTION SQL_EN_LLAMAS_FNM.CASE03.FUNCION_TOTAL_RETIRADO(CLIENTE INT, MES VARCHAR)
RETURNS INT
LANGUAGE SQL
AS 'SELECT TOTAL_RETIRADO
    FROM (
    SELECT CUSTOMER_ID AS CLIENTE,
     MONTHNAME(TXN_DATE) AS MES_NOMBRE,
     SUM(TXN_AMOUNT) AS TOTAL_RETIRADO
    FROM CUSTOMER_TRANSACTIONS
    WHERE TXN_TYPE =''withdrawal''
    and customer_id = CLIENTE AND MES_NOMBRE = MES
    GROUP BY 1,2
    ORDER BY 1 ASC
    )A';

CREATE OR REPLACE FUNCTION SQL_EN_LLAMAS_FNM.CASE03.FUNCION_BALANCE(CLIENTE INT, MES VARCHAR)
RETURNS INT
LANGUAGE SQL
AS 'SELECT
(SQL_EN_LLAMAS_FNM.CASE03.FUNCION_TOTAL_COMPRAS(CLIENTE, MES) -
SQL_EN_LLAMAS_FNM.CASE03.FUNCION_TOTAL_DEPOSITADO(CLIENTE, MES) -
SQL_EN_LLAMAS_FNM.CASE03.FUNCION_TOTAL_RETIRADO(CLIENTE, MES))';


CREATE OR REPLACE PROCEDURE SQL_EN_LLAMAS.CASE03.PROCEDURE_TITAN_FNM(CALCULO VARCHAR, CLIENTE INT, MES VARCHAR)
RETURNS VARCHAR
LANGUAGE SQL
EXECUTE AS OWNER
AS
DECLARE
    TOTAL_COMPRAS INT;
    TOTAL_DEPOSITADO INT;
    TOTAL_RETIRADO INT;
    BALANCE INT;
BEGIN
   TOTAL_COMPRAS:=SQL_EN_LLAMAS_FNM.CASE03.FUNCION_TOTAL_COMPRAS(:CLIENTE, :MES);
   TOTAL_DEPOSITADO:=SQL_EN_LLAMAS_FNM.CASE03.FUNCION_TOTAL_DEPOSITADO(:CLIENTE, :MES);
   TOTAL_RETIRADO:=SQL_EN_LLAMAS_FNM.CASE03.FUNCION_TOTAL_RETIRADO(:CLIENTE, :MES);
   BALANCE:=SQL_EN_LLAMAS_FNM.CASE03.FUNCION_BALANCE(:CLIENTE, :MES);
        
CASE WHEN CALCULO='BALANCE' THEN RETURN 'The balance of the client ' ||:CLIENTE||' is ' ||:BALANCE|| ' EUR in ' ||:MES||'.';
    WHEN CALCULO='TOTAL_COMPRAS' THEN RETURN 'The total spent in purchases of the client ' ||:CLIENTE||' is ' ||:TOTAL_COMPRAS|| ' EUR in ' ||:MES||'.';
    WHEN CALCULO='TOTAL_DEPOSITADO' THEN RETURN 'The total spent in deposits of the client ' ||:CLIENTE||' is ' ||:TOTAL_DEPOSITADO|| ' EUR in ' ||:MES||'.';
    WHEN CALCULO='TOTAL_RETIRADO' THEN RETURN 'The total spent in withdrawals of the client ' ||:CLIENTE||' is ' ||:TOTAL_RETIRADO|| ' EUR in ' ||:MES||'.';
    ELSE RETURN 'The operation identifier is not valid.';
    END CASE;

END;

CALL SQL_EN_LLAMAS.CASE03.PROCEDURE_TITAN_FNM ('BALANCE',5,'Mar');
CALL SQL_EN_LLAMAS.CASE03.PROCEDURE_TITAN_FNM ('TOTAL_COMPRAS',5,'Mar');
CALL SQL_EN_LLAMAS.CASE03.PROCEDURE_TITAN_FNM ('TOTAL_DEPOSITADO',5,'Mar');
CALL SQL_EN_LLAMAS.CASE03.PROCEDURE_TITAN_FNM ('TOTAL_RETIRADO',5,'Mar');

/*********************************************************/
/***************** COMENTARIO MARÍA *********************/
/*********************************************************/
/* 

Muy bien Fran, va tomando forma el titán.

Tienes que revisar la función de balance, con las prisas nos hemos liado con la fórmula: BALANCE= DEPOSITADO-COMPRADO-RETIRADO.
Ten cuidado con los nulos a la hora de restar valores, cuando estamos operando con importes intenta siempre poner alguna función de tratamientos de nulos.
Por ejemplo:

SELECT
(SQL_EN_LLAMAS_FNM.CASE03.FUNCION_TOTAL_DEPOSITADO(CLIENTE, MES) -
IFNULL(SQL_EN_LLAMAS_FNM.CASE03.FUNCION_TOTAL_COMPRAS(CLIENTE, MES),0) -
IFNULL(SQL_EN_LLAMAS_FNM.CASE03.FUNCION_TOTAL_RETIRADO(CLIENTE, MES),0))

Legibilidad: bien! */

/*CORRECCIONES FRAN*/

USE SCHEMA SQL_EN_LLAMAS_FNM.CASE03

CREATE OR REPLACE FUNCTION SQL_EN_LLAMAS_FNM.CASE03.FUNCION_TOTAL_COMPRAS(CLIENTE INT, MES VARCHAR)
RETURNS INT
LANGUAGE SQL
AS 'SELECT TOTAL_COMPRAS
    FROM (
    SELECT CUSTOMER_ID AS CLIENTE,
     MONTHNAME(TXN_DATE) AS MES_NOMBRE,
     SUM(TXN_AMOUNT) AS TOTAL_COMPRAS
    FROM CUSTOMER_TRANSACTIONS
    WHERE TXN_TYPE =''purchase''
    and customer_id = CLIENTE AND MES_NOMBRE = MES
    GROUP BY 1,2
    ORDER BY 1 ASC
    )A';

CREATE OR REPLACE FUNCTION SQL_EN_LLAMAS_FNM.CASE03.FUNCION_TOTAL_DEPOSITADO(CLIENTE INT, MES VARCHAR)
RETURNS INT
LANGUAGE SQL
AS 'SELECT TOTAL_DEPOSITADO
    FROM (
    SELECT CUSTOMER_ID AS CLIENTE,
     MONTHNAME(TXN_DATE) AS MES_NOMBRE,
     SUM(TXN_AMOUNT) AS TOTAL_DEPOSITADO
    FROM CUSTOMER_TRANSACTIONS
    WHERE TXN_TYPE =''deposit''
    and customer_id = CLIENTE AND MES_NOMBRE = MES
    GROUP BY 1,2
    ORDER BY 1 ASC
    )A';

CREATE OR REPLACE FUNCTION SQL_EN_LLAMAS_FNM.CASE03.FUNCION_TOTAL_RETIRADO(CLIENTE INT, MES VARCHAR)
RETURNS INT
LANGUAGE SQL
AS 'SELECT TOTAL_RETIRADO
    FROM (
    SELECT CUSTOMER_ID AS CLIENTE,
     MONTHNAME(TXN_DATE) AS MES_NOMBRE,
     SUM(TXN_AMOUNT) AS TOTAL_RETIRADO
    FROM CUSTOMER_TRANSACTIONS
    WHERE TXN_TYPE =''withdrawal''
    and customer_id = CLIENTE AND MES_NOMBRE = MES
    GROUP BY 1,2
    ORDER BY 1 ASC
    )A';

CREATE OR REPLACE FUNCTION SQL_EN_LLAMAS_FNM.CASE03.FUNCION_BALANCE(CLIENTE INT, MES VARCHAR)
RETURNS INT
LANGUAGE SQL
AS 'SELECT
(SQL_EN_LLAMAS_FNM.CASE03.FUNCION_TOTAL_DEPOSITADO(CLIENTE, MES) -
IFNULL(SQL_EN_LLAMAS_FNM.CASE03.FUNCION_TOTAL_COMPRAS(CLIENTE, MES),0) -
IFNULL(SQL_EN_LLAMAS_FNM.CASE03.FUNCION_TOTAL_RETIRADO(CLIENTE, MES),0))';


CREATE OR REPLACE PROCEDURE SQL_EN_LLAMAS.CASE03.PROCEDURE_TITAN_FNM(CALCULO VARCHAR, CLIENTE INT, MES VARCHAR)
RETURNS VARCHAR
LANGUAGE SQL
EXECUTE AS OWNER
AS
DECLARE
    TOTAL_COMPRAS INT;
    TOTAL_DEPOSITADO INT;
    TOTAL_RETIRADO INT;
    BALANCE INT;
BEGIN
   TOTAL_COMPRAS:=SQL_EN_LLAMAS_FNM.CASE03.FUNCION_TOTAL_COMPRAS(:CLIENTE, :MES);
   TOTAL_DEPOSITADO:=SQL_EN_LLAMAS_FNM.CASE03.FUNCION_TOTAL_DEPOSITADO(:CLIENTE, :MES);
   TOTAL_RETIRADO:=SQL_EN_LLAMAS_FNM.CASE03.FUNCION_TOTAL_RETIRADO(:CLIENTE, :MES);
   BALANCE:=SQL_EN_LLAMAS_FNM.CASE03.FUNCION_BALANCE(:CLIENTE, :MES);
        
CASE WHEN CALCULO='BALANCE' THEN RETURN 'The balance of the client ' ||:CLIENTE||' is ' ||:BALANCE|| ' EUR in ' ||:MES||'.';
    WHEN CALCULO='TOTAL_COMPRAS' THEN RETURN 'The total spent in purchases of the client ' ||:CLIENTE||' is ' ||:TOTAL_COMPRAS|| ' EUR in ' ||:MES||'.';
    WHEN CALCULO='TOTAL_DEPOSITADO' THEN RETURN 'The total spent in deposits of the client ' ||:CLIENTE||' is ' ||:TOTAL_DEPOSITADO|| ' EUR in ' ||:MES||'.';
    WHEN CALCULO='TOTAL_RETIRADO' THEN RETURN 'The total spent in withdrawals of the client ' ||:CLIENTE||' is ' ||:TOTAL_RETIRADO|| ' EUR in ' ||:MES||'.';
    ELSE RETURN 'The operation identifier is not valid.';
    END CASE;

END;

CALL SQL_EN_LLAMAS.CASE03.PROCEDURE_TITAN_FNM ('BALANCE',5,'Mar');
CALL SQL_EN_LLAMAS.CASE03.PROCEDURE_TITAN_FNM ('TOTAL_COMPRAS',5,'Mar');
CALL SQL_EN_LLAMAS.CASE03.PROCEDURE_TITAN_FNM ('TOTAL_DEPOSITADO',5,'Mar');
CALL SQL_EN_LLAMAS.CASE03.PROCEDURE_TITAN_FNM ('TOTAL_RETIRADO',5,'Mar');
