CREATE OR REPLACE TEMPORARY TABLE ESPECIALIDAD_SQL_BRONZE_DB_MRA.RETO.CLEANED_CUSTOMER_ORDERS AS
    SELECT
         ORDER_ID
        ,CUSTOMER_ID
        ,PIZZA_ID 
        ,CASE
             WHEN TRIM(EXCLUSIONS) IN ('null', '') 
               OR EXCLUSIONS IS NULL THEN NULL
             WHEN TRIM(EXCLUSIONS) = 'beef' THEN '3'
             ELSE EXCLUSIONS
         END AS EXCLUSIONS
        ,CASE
             WHEN TRIM(EXTRAS) IN ('null', '') 
               OR EXTRAS IS NULL THEN NULL
             ELSE EXTRAS
         END AS EXTRAS
        ,ORDER_TIME 
    FROM CUSTOMER_ORDERS;


CREATE OR REPLACE TEMPORARY TABLE ESPECIALIDAD_SQL_BRONZE_DB_MRA.RETO.CLEANED_RUNNER_ORDERS AS
    SELECT
        ORDER_ID
       ,RUNNER_ID
       ,CASE
            WHEN TRIM(PICKUP_TIME) = 'null' THEN NULL
            ELSE PICKUP_TIME
        END AS PICKUP_TIME
       ,CASE
            WHEN TRIM(DISTANCE) = 'null' THEN NULL 
             ELSE REGEXP_REPLACE(DISTANCE, '[^0-9.]', '')::NUMBER(32,2)
        END AS DISTANCE_KM
       ,CASE
            WHEN TRIM(DURATION) = 'null' THEN NULL 
            ELSE REGEXP_REPLACE(DURATION, '[^0-9.]', '')::NUMBER(32,2)
        END AS DURATION_MIN
       ,DURATION_MIN/60.0 AS DURATION_H
       ,CASE
            WHEN TRIM(CANCELLATION) IN ('null', '') THEN NULL
            ELSE CANCELLATION
        END AS CANCELLATION
    FROM RUNNER_ORDERS;

USE schema sql_en_llamas.case02;

WITH TOPPINGS_PEDIDOS AS
(
    SELECT
        B.ORDER_ID
       ,A.PIZZA_ID
       ,TOPPINGS
       ,EXTRAS
       ,EXCLUSIONS
    FROM PIZZA_RECIPES A
    LEFT JOIN ESPECIALIDAD_SQL_BRONZE_DB_MRA.RETO.CLEANED_CUSTOMER_ORDERS B
           ON A.PIZZA_ID = B.PIZZA_ID
    LEFT JOIN ESPECIALIDAD_SQL_BRONZE_DB_MRA.RETO.CLEANED_RUNNER_ORDERS C
           ON B.ORDER_ID = C.ORDER_ID
    WHERE C.CANCELLATION IS NULL
),
SPLIT_TOPPINGS AS
(
    SELECT
        NULLIF(SPLIT_PART(TOPPINGS, ',', 1), '')::INT AS INGREDIENTE_1
       ,NULLIF(SPLIT_PART(TOPPINGS, ',', 2), '')::INT AS INGREDIENTE_2
       ,NULLIF(SPLIT_PART(TOPPINGS, ',', 3), '')::INT AS INGREDIENTE_3
       ,NULLIF(SPLIT_PART(TOPPINGS, ',', 4), '')::INT AS INGREDIENTE_4
       ,NULLIF(SPLIT_PART(TOPPINGS, ',', 5), '')::INT AS INGREDIENTE_5
       ,NULLIF(SPLIT_PART(TOPPINGS, ',', 6), '')::INT AS INGREDIENTE_6
       ,NULLIF(SPLIT_PART(TOPPINGS, ',', 7), '')::INT AS INGREDIENTE_7
       ,NULLIF(SPLIT_PART(TOPPINGS, ',', 8), '')::INT AS INGREDIENTE_8
       ,NULLIF(SPLIT_PART(EXCLUSIONS, ',', 1), '')::INT AS EXCLUSION_1
       ,NULLIF(SPLIT_PART(EXCLUSIONS, ',', 2), '')::INT AS EXCLUSION_2
       ,NULLIF(SPLIT_PART(EXTRAS, ',', 1), '')::INT AS EXTRA_1
       ,NULLIF(SPLIT_PART(EXTRAS, ',', 2), '')::INT AS EXTRA_2
    FROM TOPPINGS_PEDIDOS
)
,
FREQ_INGREDIENTES_EXTRAS AS
(
    SELECT
        INGREDIENTE
       ,COUNT(INGREDIENTE) AS FRECUENCIA_ING
    FROM SPLIT_TOPPINGS
    UNPIVOT(INGREDIENTE
        FOR INGREDIENTE_ID
            IN (INGREDIENTE_1, INGREDIENTE_2, INGREDIENTE_3, INGREDIENTE_4, INGREDIENTE_5, INGREDIENTE_6, INGREDIENTE_7, INGREDIENTE_8, EXTRA_1, EXTRA_2))
    WHERE INGREDIENTE IS NOT NULL
    GROUP BY 1
),
FREQ_INGREDIENTES_EXCLUIDOS AS
(
    SELECT
        INGREDIENTE
       ,COUNT(INGREDIENTE) AS FRECUENCIA_EXC
    FROM SPLIT_TOPPINGS
    UNPIVOT(INGREDIENTE
        FOR EXCLUSIONS
            IN (EXCLUSION_1,EXCLUSION_2))
    WHERE INGREDIENTE IS NOT NULL
    GROUP BY 1
),
FREQ_TOTAL AS
(
    SELECT 
        A.INGREDIENTE
       ,COALESCE(FRECUENCIA_ING, 0) - COALESCE(FRECUENCIA_EXC, 0) AS FRECUENCIA_TOTAL
    FROM FREQ_INGREDIENTES_EXTRAS A
    LEFT JOIN FREQ_INGREDIENTES_EXCLUIDOS B
           ON A.INGREDIENTE = B.INGREDIENTE
)

SELECT
    A.TOPPING_NAME AS NOMBRE_INGREDIENTE
   ,COALESCE(FRECUENCIA_TOTAL, 0) AS FRECUENCIA_TOTAL
FROM PIZZA_TOPPINGS A
LEFT JOIN FREQ_TOTAL B
       ON A.TOPPING_ID = B.INGREDIENTE
ORDER BY 2 DESC;
